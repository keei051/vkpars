# report_generator.py
import pandas as pd
import os
import logging
from datetime import datetime
from cache import cache

async def generate_report(df: pd.DataFrame, city: str) -> tuple[str, str]:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞ –∏ CSV."""
    total_found = len(df)
    errors = len(df[df['error'].notnull() & (df['error'] == '–¥–∞')])
    total_members = df['members_count'].sum()
    
    report = f"""
‚è≥ –ü–æ–∏—Å–∫ –ø–æ —Å–ª–æ–≤—É "{city}" –∑–∞–≤–µ—Ä—à—ë–Ω...

üîç –ù–∞–π–¥–µ–Ω–æ: {total_found} –≥—Ä—É–ø–ø
üßπ –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {total_found - errors}

‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:
üìÅ –í –¥–æ–∫—É–º–µ–Ω—Ç–µ: {total_found - errors} –≥—Ä—É–ø–ø—ã
‚ùó –û—à–∏–±–æ–∫: {errors}
üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —Å—É–º–º–∞—Ä–Ω–æ: {total_members:,}
üìä –ó–∞–ø—Ä–æ—Å–æ–≤ –∫ –±–∞–∑–µ: 1
‚¨áÔ∏è –§–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω –Ω–∏–∂–µ.
    """

    output_df = df[['name', 'link', 'members_count', 'views_count', 'er', 'geo', 'activity']].copy()
    output_df.columns = ['–ù–∞–∑–≤–∞–Ω–∏–µ', '–°—Å—ã–ª–∫–∞', '–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤', '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã', 'ER', '–ì–µ–æ–≥—Ä–∞—Ñ–∏—è', '–ñ–∏–≤–æ—Å—Ç—å']
    
    os.makedirs('results', exist_ok=True)
    file_name = f"results_{city}_{datetime.now().strftime('%Y%m%d')}.csv"
    file_path = f"results/{file_name}"
    
    output_df.to_csv(file_path, index=False, encoding='utf-8')
    file_size = os.path.getsize(file_path) / (1024 * 1024)
    if file_size > 5:
        logging.error(f"–§–∞–π–ª {file_path} –ø—Ä–µ–≤—ã—à–∞–µ—Ç 5 –ú–ë")
        raise ValueError("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (>5 –ú–ë)")

    cache.set(f"file:{city.lower()}", {
        'file_path': file_path,
        'timestamp': datetime.now().isoformat()
    })
    
    logging.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Ñ–∞–π–ª: {file_path}")
    return report, file_path
