# handlers.py
from aiogram import Router, types
from aiogram.filters import Command, RegexpCommandsFilter
from bot_manager import BotManager
from search_engine import search_groups
from report_generator import generate_report
from database import add_ban_word, remove_ban_word, get_banlist, save_groups_from_vk
from config import ADMIN_ID, VK_TOKEN
import logging
import os
import requests

router = Router()

@router.message(Command(commands=['start']))
async def start_command(message: types.Message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ."""
    await message.answer("üëÅÔ∏è‚Äçüó®Ô∏è –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ!\n"
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ø–æ–∏—Å–∫(–ì–æ—Ä–æ–¥), –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–∏—Å–∫(–ò–∂–µ–≤—Å–∫)")
    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç {message.from_user.id}")

@router.message(RegexpCommandsFilter(regexp_commands=['–ø–æ–∏—Å–∫\(([–ê-–Ø–∞-—èA-Za-z0-9]+)\)']))
async def search_command(message: types.Message, regexp_command):
    """–ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø."""
    city = regexp_command.group(1)
    bot = BotManager([os.getenv('BOT_TOKEN')]).get_current_bot()
    
    await bot.send_message(message.chat.id, f"‚è≥ –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –ø–æ —Å–ª–æ–≤—É '{city}'...")
    logging.info(f"–ü–æ–∏—Å–∫: '{city}' –æ—Ç {message.from_user.id}")

    try:
        df = await search_groups(city)
        if df.empty:
            await bot.send_message(message.chat.id, 
                                 f"‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{city}'.\n"
                                 "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—é.")
            return

        report, file_path = await generate_report(df, city)
        await bot.send_message(message.chat.id, report)

        with open(file_path, 'rb') as file:
            await bot.send_document(message.chat.id, file, caption=f"‚¨áÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è '{city}'")
        
        logging.info(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è '{city}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ '{city}': {e}")
        await bot.send_message(message.chat.id, "‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(Command(commands=['add_ban']))
async def add_ban_command(message: types.Message):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞."""
    if str(message.from_user.id) != ADMIN_ID:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    word = message.text.split(maxsplit=1)[1] if len(message.text.split()) > 1 else None
    if not word:
        await message.answer("‚ùó –£–∫–∞–∂–∏—Ç–µ —Å–ª–æ–≤–æ: /add_ban –º–∞–≥–∞–∑–∏–Ω")
        return
    add_ban_word(word.lower())
    await message.answer(f"‚úÖ –°–ª–æ–≤–æ '{word}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å—Ç–æ–ø-–ª–∏—Å—Ç.")

@router.message(Command(commands=['remove_ban']))
async def remove_ban_command(message: types.Message):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞."""
    if str(message.from_user.id) != ADMIN_ID:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    word = message.text.split(maxsplit=1)[1] if len(message.text.split()) > 1 else None
    if not word:
        await message.answer("‚ùó –£–∫–∞–∂–∏—Ç–µ —Å–ª–æ–≤–æ: /remove_ban –º–∞–≥–∞–∑–∏–Ω")
        return
    remove_ban_word(word.lower())
    await message.answer(f"‚úÖ –°–ª–æ–≤–æ '{word}' —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å—Ç–æ–ø-–ª–∏—Å—Ç–∞.")

@router.message(Command(commands=['list_ban']))
async def list_ban_command(message: types.Message):
    """–°–ø–∏—Å–æ–∫ —Å—Ç–æ–ø-—Å–ª–æ–≤."""
    if str(message.from_user.id) != ADMIN_ID:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    banlist = get_banlist()
    if banlist:
        await message.answer("üìú –°—Ç–æ–ø-—Å–ª–æ–≤–∞:\n" + "\n".join(banlist))
    else:
        await message.answer("üìú –°—Ç–æ–ø-–ª–∏—Å—Ç –ø—É—Å—Ç.")

@router.message(Command(commands=['stats']))
async def stats_command(message: types.Message):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–∑–∞–≥–ª—É—à–∫–∞)."""
    if str(message.from_user.id) != ADMIN_ID:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    await message.answer("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–∑–∞–≥–ª—É—à–∫–∞):\n- –ó–∞–ø—Ä–æ—Å–æ–≤: 0\n- –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤: 0")

@router.message(Command(commands=['update_data']))
async def update_data_command(message: types.Message):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø —á–µ—Ä–µ–∑ VK API."""
    if str(message.from_user.id) != ADMIN_ID:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    bot = BotManager([os.getenv('BOT_TOKEN')]).get_current_bot()
    
    await bot.send_message(message.chat.id, "‚è≥ –ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ VK API...")
    logging.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç {message.from_user.id}")

    try:
        # –ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø —á–µ—Ä–µ–∑ VK API
        url = "https://api.vk.com/method/groups.search"
        params = {
            "access_token": VK_TOKEN,
            "q": "",  # –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –≥–æ—Ä–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä, "–ò–∂–µ–≤—Å–∫"
            "count": 1000,  # –ú–∞–∫—Å–∏–º—É–º 1000 –≥—Ä—É–ø–ø
            "v": "5.131"
        }
        response = requests.get(url, params=params)
        data = response.json()

        if "error" in data:
            await bot.send_message(message.chat.id, f"‚ùó –û—à–∏–±–∫–∞ VK API: {data['error']['error_msg']}")
            logging.error(f"VK API –æ—à–∏–±–∫–∞: {data['error']['error_msg']}")
            return

        groups = []
        for group in data.get("response", {}).get("items", []):
            groups.append({
                "link": f"https://vk.com/club{group['id']}",
                "name": group.get("name", ""),
                "members_count": group.get("members_count", 0),
                "views_count": 0,  # –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ—Å—Ç–æ–≤
                "er": 0.0,  # –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞—Å—á—ë—Ç
                "geo": "",  # –¢—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
                "activity": "–ñ–∏–≤–∞—è" if group.get("is_closed", 0) == 0 else "–ó–∞–∫—Ä—ã—Ç–∞—è",
                "error": ""
            })

        save_groups_from_vk(groups)
        await bot.send_message(message.chat.id, f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {len(groups)} –≥—Ä—É–ø–ø –∏–∑ VK API.")
        logging.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ {len(groups)} –≥—Ä—É–ø–ø")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        await bot.send_message(message.chat.id, "‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏.")
